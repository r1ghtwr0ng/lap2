syntax = "proto3";

// Structure of the reconstructed message.
// Contains cryptographic information needed to decrypt the request.
message EncryptedRequest {
    bool is_encrypted = 1;
    bytes iv = 2;
    bytes data = 3;
}
// Structure of the reconstructed message.
// Contains the actual message and cryptographic information.enum
// Used to relay instructions to and from the proxy.
message Request {
    uint64 hmac = 1;
    uint64 request_id = 2;
    bytes request_type = 3;
    bytes data = 4;
    oneof crypto {
        KeyExchangeInit init_ke = 5;
        KeyExchangeResponse resp_ke = 6;
        KeyExchangeFinal fin_ke = 7;
        KeyRotation key_rot = 8;
        SymmetricKey sym_key = 9;
    }
}
// Key exchange initialisation struct.
// Contains cryptographic information needed to establish a secure channel.
message KeyExchangeInit {
    bytes identity = 1;
    bytes ephemeral_pk = 2;
    bytes generator = 3;
    bytes ring_pk = 4;
    bytes signature = 5;
    bytes hmac_key = 6;
}
// Key exchange response struct.
message KeyExchangeResponse {
    bytes identity = 1;
    bytes ephemeral_pk = 2;
    bytes generator = 3;
    bytes ring_pk = 4;
    bytes signature = 5;
    bytes ring_signature = 6;
    bytes hmac_key = 7;
}
// Key exchange finalisation struct.
// Final message in the key exchange protocol.
message KeyExchangeFinal {
    bytes ring_signature = 1;
    bytes hmac_key = 2;
}
// Regular symmetric key struct.
// Used once symmetric keys have been established.
message SymmetricKey {
    bytes hmac_key = 1;
}
// Symmetric key rotation struct.
// Used to rotate symmetric keys.
message KeyRotation {
    bytes new_key = 1;
    bytes hmac_key = 2;
}