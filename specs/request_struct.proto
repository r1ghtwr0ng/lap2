syntax = "proto3";

// Structure of the reconstructed message.
// Contains cryptographic information needed to decrypt the request.
message EncryptedRequest {
    bool is_encrypted = 1;
    bytes iv = 2;
    bytes data = 3;
}
// Structure of the reconstructed message.
// Contains the actual message and cryptographic information.enum
// Used to relay instructions to and from the proxy.
message Request {
    uint64 hmac = 1;
    uint64 request_id = 2;
    bytes request_type = 3;
    bytes data = 4;
    oneof crypto {
        KeyExchangeInit init_ke = 5;
        KeyExchangeResponse resp_ke = 6;
        KeyExchangeFinal fin_ke = 7;
        KeyRotation key_rot = 8;
        SymmetricKey sym_key = 9;
    }
}
// Key exchange initialisation struct.
// Contains cryptographic information needed to establish a secure channel.
message KeyExchangeInit {
    bytes identity = 1;
    bytes pk_ephem_sign = 2;
    bytes signature = 3;
    bytes pk_dh = 4;
    bytes hmac_key = 5;
    oneof pk_rs {
        CrsVerKey crs_ephem = 6;
        RsVerKey rs_ephem = 7;
    }
    oneof pk_lt {
        CrsVerKey crs_lt = 8;
        RsVerKey rs_lt = 9;
    }
}

// Key exchange response struct.
message KeyExchangeResponse {
    bytes identity = 1;
    bytes pk_ephem_sign = 2;
    bytes signature = 3;
    bytes pk_dh = 4;
    bytes hmac_key = 5;
    oneof pk_rs {
        CrsVerKey crs_ephem = 6;
        RsVerKey rs_ephem = 7;
    }
    oneof pk_lt {
        CrsVerKey crs_lt = 8;
        RsVerKey rs_lt = 9;
    }
    SAG ring_signature = 10;
}
// Key exchange finalisation struct.
// Final message in the key exchange protocol.
message KeyExchangeFinal {
    SAG ring_signature = 1;
    bytes hmac_key = 2;
}
// Regular symmetric key struct.
// Used once symmetric keys have been established.
message SymmetricKey {
    bytes hmac_key = 1;
}
// Symmetric key rotation struct.
// Used to rotate symmetric keys.
message KeyRotation {
    bytes new_key = 1;
    bytes hmac_key = 2;
}

// Spontaneous Anonymous Group signature struct.
message SAG {
    bytes chal = 1;
    repeated bytes ring = 2;
    repeated bytes resp = 3;
    bytes commitment = 4;
}

// C-RS signature struct.
message CrsVerKey {
    bytes rs_vk = 1;
    bytes sig_vk = 2;
}

// Regular RS signature.
message RsVerKey {
    bytes rs_vk = 1;
}